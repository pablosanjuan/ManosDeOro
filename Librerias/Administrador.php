<?php


 /**
  * Administrador Value Object.
  * This class is value object representing database table administrador
  * This class is intented to be used together with associated Dao object.
  */

 /**
  * This sourcecode has been generated by FREE DaoGen generator version 2.4.1.
  * The usage of generated code is restricted to OpenSource software projects
  * only. DaoGen is available in http://titaniclinux.net/daogen/
  * It has been programmed by Tuomo Lukka, Tuomo.Lukka@iki.fi
  *
  * DaoGen license: The following DaoGen generated source code is licensed
  * under the terms of GNU GPL license. The full text for license is available
  * in GNU project's pages: http://www.gnu.org/copyleft/gpl.html
  *
  * If you wish to use the DaoGen generator to produce code for closed-source
  * commercial applications, you must pay the lisence fee. The price is
  * 5 USD or 5 Eur for each database table, you are generating code for.
  * (That includes unlimited amount of iterations with all supported languages
  * for each database table you are paying for.) Send mail to
  * "Tuomo.Lukka@iki.fi" for more information. Thank you!
  */




class Administrador {

    /** 
     * Persistent Instance variables. This data is directly 
     * mapped to the columns of database table.
     */
    var $idAdministrador;
    var $primerNom;
    var $segundoNom;
    var $primerApe;
    var $segundoApe;
    var $username;
    var $password;
    var $email;
    var $tipo;



    /** 
     * Constructors. DaoGen generates two constructors by default.
     * The first one takes no arguments and provides the most simple
     * way to create object instance. The another one takes one
     * argument, which is the primary key of the corresponding table.
     */

    function Administrador () {

    }

    /* function Administrador ($idAdministradorIn) {

          $this->idAdministrador = $idAdministradorIn;

    } */


    /** 
     * Get- and Set-methods for persistent variables. The default
     * behaviour does not make any checks against malformed data,
     * so these might require some manual additions.
     */

    function getIdAdministrador() {
          return $this->idAdministrador;
    }
    function setIdAdministrador($idAdministradorIn) {
          $this->idAdministrador = $idAdministradorIn;
    }

    function getPrimerNom() {
          return $this->primerNom;
    }
    function setPrimerNom($primerNomIn) {
          $this->primerNom = $primerNomIn;
    }

    function getSegundoNom() {
          return $this->segundoNom;
    }
    function setSegundoNom($segundoNomIn) {
          $this->segundoNom = $segundoNomIn;
    }

    function getPrimerApe() {
          return $this->primerApe;
    }
    function setPrimerApe($primerApeIn) {
          $this->primerApe = $primerApeIn;
    }

    function getSegundoApe() {
          return $this->segundoApe;
    }
    function setSegundoApe($segundoApeIn) {
          $this->segundoApe = $segundoApeIn;
    }

    function getUsername() {
          return $this->username;
    }
    function setUsername($usernameIn) {
          $this->username = $usernameIn;
    }

    function getPassword() {
          return $this->password;
    }
    function setPassword($passwordIn) {
          $this->password = $passwordIn;
    }

    function getEmail() {
          return $this->email;
    }
    function setEmail($emailIn) {
          $this->email = $emailIn;
    }

    function getTipo() {
          return $this->tipo;
    }
    function setTipo($tipoIn) {
          $this->tipo = $tipoIn;
    }



    /** 
     * setAll allows to set all persistent variables in one method call.
     * This is useful, when all data is available and it is needed to 
     * set the initial state of this object. Note that this method will
     * directly modify instance variales, without going trough the 
     * individual set-methods.
     */

    function setAll($idAdministradorIn,
          $primerNomIn,
          $segundoNomIn,
          $primerApeIn,
          $segundoApeIn,
          $usernameIn,
          $passwordIn,
          $emailIn,
          $tipoIn) {
          $this->idAdministrador = $idAdministradorIn;
          $this->primerNom = $primerNomIn;
          $this->segundoNom = $segundoNomIn;
          $this->primerApe = $primerApeIn;
          $this->segundoApe = $segundoApeIn;
          $this->username = $usernameIn;
          $this->password = $passwordIn;
          $this->email = $emailIn;
          $this->tipo = $tipoIn;
    }


    /** 
     * hasEqualMapping-method will compare two Administrador instances
     * and return true if they contain same values in all persistent instance 
     * variables. If hasEqualMapping returns true, it does not mean the objects
     * are the same instance. However it does mean that in that moment, they 
     * are mapped to the same row in database.
     */
    function hasEqualMapping($valueObject) {

          if ($valueObject->getIdAdministrador() != $this->idAdministrador) {
                    return(false);
          }
          if ($valueObject->getPrimerNom() != $this->primerNom) {
                    return(false);
          }
          if ($valueObject->getSegundoNom() != $this->segundoNom) {
                    return(false);
          }
          if ($valueObject->getPrimerApe() != $this->primerApe) {
                    return(false);
          }
          if ($valueObject->getSegundoApe() != $this->segundoApe) {
                    return(false);
          }
          if ($valueObject->getUsername() != $this->username) {
                    return(false);
          }
          if ($valueObject->getPassword() != $this->password) {
                    return(false);
          }
          if ($valueObject->getEmail() != $this->email) {
                    return(false);
          }
          if ($valueObject->getTipo() != $this->tipo) {
                    return(false);
          }

          return true;
    }



    /**
     * toString will return String object representing the state of this 
     * valueObject. This is useful during application development, and 
     * possibly when application is writing object states in textlog.
     */
    function toString() {
        $out = $this->getDaogenVersion();
        $out = $out."\nclass Administrador, mapping to table administrador\n";
        $out = $out."Persistent attributes: \n"; 
        $out = $out."idAdministrador = ".$this->idAdministrador."\n"; 
        $out = $out."primerNom = ".$this->primerNom."\n"; 
        $out = $out."segundoNom = ".$this->segundoNom."\n"; 
        $out = $out."primerApe = ".$this->primerApe."\n"; 
        $out = $out."segundoApe = ".$this->segundoApe."\n"; 
        $out = $out."username = ".$this->username."\n"; 
        $out = $out."password = ".$this->password."\n"; 
        $out = $out."email = ".$this->email."\n"; 
        $out = $out."tipo = ".$this->tipo."\n"; 
        return $out;
    }


    /**
     * Clone will return identical deep copy of this valueObject.
     * Note, that this method is different than the clone() which
     * is defined in java.lang.Object. Here, the retuned cloned object
     * will also have all its attributes cloned.
     */
    function cloneObject() {
        $cloned = new Administrador();

        $cloned->setIdAdministrador($this->idAdministrador); 
        $cloned->setPrimerNom($this->primerNom); 
        $cloned->setSegundoNom($this->segundoNom); 
        $cloned->setPrimerApe($this->primerApe); 
        $cloned->setSegundoApe($this->segundoApe); 
        $cloned->setUsername($this->username); 
        $cloned->setPassword($this->password); 
        $cloned->setEmail($this->email); 
        $cloned->setTipo($this->tipo); 

        return $cloned;
    }



    /** 
     * getDaogenVersion will return information about
     * generator which created these sources.
     */
    function getDaogenVersion() {
        return "DaoGen version 2.4.1";
    }

}

?>